//Time: O(V+E) V = graph.size(), E = edge.size()
//Space: O(V+E)
###Recursive(DFS)#################################################################################
class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        unordered_map<int, vector<int>>graph;
        unordered_set<int>visit;
        for (const auto& edge:edges){
            int u = edge[0];
            int v = edge[1];
            graph[u].push_back(v);
            graph[v].push_back(u);
        }
        return dfs(graph, visit, source, destination);
    }
    bool dfs(unordered_map<int, vector<int>>&graph, unordered_set<int>&visit, int node, int des ){
        if (node == des) return true;
        visit.insert(node);
        for (int nei:graph[node]){
            if (visit.find(nei) == visit.end()){
                if (dfs(graph, visit, nei, des)){;//if not checking, the code will ignore the resr nei, and keep going.
                    return true;
                }
            }
        }
        return false;
    }
};

###iterative(DFS)#################################################################################
class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        if (source == destination) return true;
        // Create an adjacency list
        unordered_map<int, vector<int>>graph;
        for (const auto& edge:edges){
            int u = edge[0];
            int v = edge[1];
            graph[u].push_back(v);
            graph[v].push_back(u);
        }
        unordered_set<int>visit;
        stack<int>s;

        //start from the source
        s.push(source);
        visit.insert(source);

        //Iterative DFS
        while (!s.empty()){
            int node = s.top();
            s.pop();

            if (node == destination) return true;

            for (int nei :graph[node]){
                if (visit.find(nei) == visit.end()){
                    visit.insert(nei);
                    s.push(nei);
                }
            }
        }
        return false;    
    }
};

###iterative(BFS)###################################################################
class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        if (source == destination) return true;
        // Create an adjacency list
        unordered_map<int, vector<int>>graph;
        for (const auto& edge:edges){
            int u = edge[0];
            int v = edge[1];
            graph[u].push_back(v);
            graph[v].push_back(u);
        }

        unordered_set<int>visit;
        queue<int>q;

        //start from the source
        q.push(source);
        visit.insert(source);

        //Iterative DFS
        while (!q.empty()){
            int node = q.front();
            q.pop();
            if (node == destination) return true;
            for (int nei :graph[node]){
                if (visit.find(nei) == visit.end()){
                    visit.insert(nei);
                    q.push(nei);
                }
            }
        }
        return false;    
    }
};
###UnionFind(quick union)################################################################
class UnionFind {//quick union, worst case O(N*N)
    vector<int>root;
public:
    UnionFind(int n):root(n){
        //iota(root.begin(), root.end(), 0);//0, 1, 2, 3...n-1
        for (int i=0; i<n; i++){
            root[i] = i;
        }
    }
    int find(int x){
        while (x!=root[x]){//if x parent is not root
            x = root[x];
        }
        return x;// when x = root[x] return x
    }
    void unionset(int x, int y){
        int root_x = find(x);
        int root_y = find(y);
        if (root_x != root_y){
            root[root_y] = root_x;
        }
    }
    bool connected(int x, int y){
        return(find(x) == find(y));
    }
};
class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        UnionFind g(n); //graph g with n vertices, need n to do unionset
        for (auto& edge:edges){
            g.unionset(edge[0], edge[1]);
        }
        return g.connected(source, destination);    
    }
};
###UnionFind(cheat ver)################################################################
class Solution {
public:
    int find(vector<int>&root, int x){
        while(x!=root[x]){
            x = root[x];
        }
        return x;
    }
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        vector<int>root(n);
        iota(root.begin(), root.end(), 0);
        for (const auto& edge : edges){
            int u = edge[0], v = edge[1];
            int root_u = find(root, u);
            int root_v = find(root, v);
            if (u!=v){
                root[root_u] = root_v;
            }
        }
        return find(root, source) == find(root, destination);
    }
};
