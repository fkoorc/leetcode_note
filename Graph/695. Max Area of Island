//Time:O(n*m)
//space:O(n*m)
class Solution {
public:
    //grid, cur will be update
    //try iterative to avoid stack flow
    vector<vector<int>>drs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    void dfs(vector<vector<int>>& grid, int r, int c, int &cur){
        if (r<0 || r>grid.size()-1 || c<0 || c>grid[0].size()-1 || grid[r][c] == 0){
            return;
        }
        cur++;
        grid[r][c] -= 1;
        for(const auto& dr:drs){
            dfs(grid, r + dr[0], c + dr[1], cur); 
        }
    }

    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int res = 0;
        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[0].size(); j++){
                if (grid[i][j] == 1){
                    int cur = 0;
                    dfs(grid, i, j, cur);
                    res = max(cur, res);
                }
            }
        }
        return res;        
    }
};
