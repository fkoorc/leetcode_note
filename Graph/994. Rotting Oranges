//Time: O(m*n)
//Space:O(m*n)
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int, int>>q;
        int row = grid.size(), col = grid[0].size();
        int fresh = 0;
        int time = 0;
        // Add all rotten oranges to the queue and count fresh ones
        for (int i=0; i<row; i++){
            for (int j=0; j<col; j++){
                if (grid[i][j] == 2){
                    q.push({i, j});
                }else if(grid[i][j] == 1){
                    fresh++;
                }
            }
        }
        // No fresh oranges, no rotten
        if (fresh == 0)return 0;

        vector<vector<int>>direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        // BFS to rot all oranges
        while(!q.empty()){
            int size = q.size();
            bool rot = false;
            for (int i=0; i<size; i++){
                auto [r, c] = q.front();
                q.pop();
                //check 4 direction
                for (const auto& dr : direction){
                    int nr = r+dr[0];
                    int nc = c+dr[1];
                    
                    if (nr>=0 && nc>=0 && nr<row && nc<col && grid[nr][nc] == 1 ){
                        grid[nr][nc] = 2;//orange to rotten
                        q.push({nr, nc});
                        fresh--;
                        rot = true;
                    }
                }
            }
            //if any orange rotten in this iteration, increase time
            if (rot) time++;
        }
        //if any fresh orange exist, return -1
        if (fresh>0) return -1;

        return time;
    }
};
