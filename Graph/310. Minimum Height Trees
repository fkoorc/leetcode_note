class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n == 1) return {0}; // no edge case
        //edge graph
        unordered_map<int, vector<int>>graph;
        for (const auto& edge: edges){
            int u = edge[0], v = edge[1];
            graph[u].push_back(v);
            graph[v].push_back(u);
        }

        //find all leaf
        queue<int> leaf;
        for (int i=0; i<n; i++){
            if (graph[i].size() == 1) leaf.push(i);
        }
        
        //BFS, node-= every leaf until queue left root(1 or 2 root)
        int nodes = n;
        while(!leaf.empty() && nodes>2){
            int countleaf = leaf.size();
            nodes -= countleaf;
            for (int i=0; i<countleaf; i++){
                int l = leaf.front();
                leaf.pop();
                for (auto& nei: graph[l]){
                    auto it = remove(graph[nei].begin(), graph[nei].end(), l);
                    graph[nei].erase(it, graph[nei].end());//erase iterate operater fucking shit
                    if (graph[nei].size() == 1){ //nei turn to new leaf
                        leaf.push(nei);
                    }
                }
            }
        }
        vector<int> res;
        while(!leaf.empty()){
            res.push_back(leaf.front());
            leaf.pop();
        }
        return res;
    }
};
