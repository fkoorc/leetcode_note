//Time: O(N+M) where N is a number of nodes (vertices) and M is a number of edges.
//Space: O(N) This space is occupied by the visited hash map 
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    unordered_map<Node*, Node*>mp;
    Node* dfs(Node* node){
        Node* clone = new Node(node->val);
        mp[node] = clone;
        for (auto& nei: node->neighbors){
            clone->neighbors.push_back(mp.count(nei)?mp[nei]:dfs(nei));
        }
        return clone;
    }
    Node* cloneGraph(Node* node) {
        if (!node or !node->neighbors.size())
            return !node?NULL:new Node(node->val);
        return dfs(node);
        
    }
};
