//Time: O(n)
//Space: O(n), n for the ans vector<vector<int>>
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>>ans;
        int new_0 = newInterval[0];
        int new_1 = newInterval[1];
        int n = intervals.size();
        for (int i=0; i<n; i++){
            //Case1: Non-overlap && newInterval before Interval
            if (new_1 < intervals[i][0]){
                ans.push_back(newInterval);
                copy(intervals.begin()+i, intervals.end(), back_inserter(ans));
                return ans;
            //Case2: Non-overlap && newInterval after Interval 
            }else if (new_0 > intervals[i][1]){
                ans.push_back(intervals[i]);
            //Case3: overlap
            }else{
                newInterval[0] = min(intervals[i][0], newInterval[0]);
                newInterval[1] = max(intervals[i][1], newInterval[1]);
            }
        }
        //for the case2 add newinterval to the end
        ans.push_back(newInterval);
        return ans;
    }
};
