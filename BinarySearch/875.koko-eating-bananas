//Time:O(nâ‹…logm) n = piles length, m = binary search correct count
//space:O(1) 
class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int l = 1, r = *max_element(piles.begin(), piles.end());
        //if l = 0 may lead to zero/zero issue
        //result = std::max_element(v.begin(), v.end());
        //k = m;
        int m ;
        while(l<=r){
            m = l + (r-l)/2;
            long long count = 0;
            for (auto p:piles){// count += (p+m-1)/m;
                count += ceil((double)p/m);
            }
            if (count<=h) r = m-1;
            else if (count>h) l = m+1;
            //count==h, r = m-1, to find smaller m-> k
        }
        return l;//when l = r, loop break and return l
    }
};
