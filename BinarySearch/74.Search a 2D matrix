//Time: O(log(m)+log(n))
//Space:O(1)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int row = matrix.size(), col = matrix[0].size();

        //find which row
        int row_low = 0, row_high = row-1;
        int row_mid = row_low+(row_high-row_low)/2;
        while(row_low<=row_high){
            row_mid = row_low+(row_high-row_low)/2;
            if (matrix[row_mid][0]>target)
                row_high = row_mid-1;
            else if(matrix[row_mid][col-1]<target)
                row_low = row_mid+1;
            else
                break;
        }

        //find target col in "row_mid"
        int col_left = 0, col_right = col-1;
        while(col_left<=col_right){
            int col_mid = col_left+(col_right-col_left)/2;
            if (matrix[row_mid][col_mid]>target)
                col_right = col_mid-1;
            else if(matrix[row_mid][col_mid]<target)
                col_left = col_mid+1;
            else//matrix[row_mid][col_mid] == target 
                return true;
        }
        return false;        
    }
};
