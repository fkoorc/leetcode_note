預設set會從小到大排序。
set容器裡面的元素是唯一的，具有不重複的特性
multiset可以允許元素重複。
unordered_set 不排序的set。
unordered_multiset 不排序的multiset。

#include <set>
// declare a set
set<T> s;
set<T> s{1, 2, 3, 4, 5}; // with initial value
set<T> s(vector<T>);    // 可以輸入vector
set<T> s(vector.begin(), vector.end()); // import data from vector，方便查找資料
set<T,greater<T>> s2; // 從大排到小

###
multiset<T> st;
// 常用function
s.empty();
s.size();
s.insert();
auto it = s.insert(val); // 可以取得insert之後的位置
s.erase();    // 可以傳入key或是iterator, 如果傳入為key會刪除重複的key
//所以必須先使用find找出value的iterator，這樣才可以確保只刪除一個
s.erase(s.find(value));
s.clear();
s.count(); // 看看elemet有幾個，因為set只容許一個，所以等於是判斷有無。multiset會回傳個數。
s.find(); // 回傳iterator，所以還要判斷使否是s.end();
// convert set to vector
vector<T> v(s.begin(), s.end());
// Traversal
for(const auto& item : s) {    //宣告成const前提是不會在function內修改item的值。
    cout << item << endl;
}
for(auto it = s.begin(); it != s.end(); ++it){
    cout << *it << endl;
}
for (auto it = s.rbegin(); it != s.rend(); ++it) {
    cout << *it << endl;
}
// 取第一個和最後一個element
cout << *s.begin() << endl;    // 取第一個element的值
cout << *s.rbegin() << endl;   // 取最後一個element的值，不可以直接使用end()
cout << *(--s.end()) << end;   // 必須使用end()的前一個
