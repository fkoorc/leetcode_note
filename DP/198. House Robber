//Time: O(n)
//Space: O(1)
/*
Initialization:
pre keeps the maximum amount robbed from all houses up to the house before the last one.
cur keeps the maximum amount robbed from all houses up to the last house.

Iterate Through Each House:
For each house i, compute the maximum amount that can be robbed if the current house i is included (pre + nums[i]) or excluded (cur).
next is the maximum of robbing the current house plus the maximum from pre and not robbing the current house, which is just cur.
*/
class Solution {
public:
    int rob(vector<int>& nums) {
        //robFrom[i] = max(robFrom[i-2] + nums[i], robFrom[i-1])
        int pre=0; 
        int cur=0;
        for (int i=0; i<nums.size(); i++){
            int next = max(pre+nums[i], cur);
            pre = cur;
            cur = next;
        } 
        return cur;
    }
};
