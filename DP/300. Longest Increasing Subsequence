//Time: O(n^2)
//Space: O(n)
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int>dp(nums.size(), 1);//initial 1
        for (int i=0; i<nums.size(); i++){
            for (int j=0; j<i; j++){
                if (nums[j]<nums[i]){
                    dp[i] = max(dp[j]+1, dp[i]);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());
        
    }
};

## use binary search ###############
//Time: O(nlogn)
//Space: O(n)
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int>dp(nums.size(), 1);//initial 1
        vector<int>ans;
        ans.push_back(nums[0]);
        for (int i=1; i<nums.size(); i++){
            if (nums[i] > ans.back()){
                ans.push_back(nums[i]);
            }else{
                //bianrry search logn
                int low = lower_bound(ans.begin(), ans.end(), nums[i])-ans.begin();
                ans[low] = nums[i];
            }
        }
        return ans.size();  
    }
};
