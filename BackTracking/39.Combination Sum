//Time: O(2^target)
//Space: O(target)
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int>cur;
        vector<vector<int>>res;
        dfs(candidates, target, 0, cur, res);
        return res;

    }
private:
    void dfs(vector<int> &cand, int target, int i, vector<int> &cur, vector<vector<int>> &res){
        if (i >= cand.size() || target<0 )return ;//?
        if (target == 0){
            res.push_back(cur);
            return;
        }
        cur.push_back(cand[i]);
        dfs(cand, target-cand[i], i, cur, res);
        cur.pop_back();//?
        dfs(cand, target, i+1, cur, res);
    }
};
