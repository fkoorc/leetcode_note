//Time: O(n*2^n), 2^n accounts subset dfs calculate; n accounts XOR calculate
//Space: O(n), the max Recursion Stack is n; 'cur' store most n element so its n
class Solution {
public:
    int subsetXORSum(vector<int>& nums) {
        //backtracking subset
        //vector<vector<int>>res;
        int res = 0;
        vector<int>cur;
        dfs(nums, 0, cur, res);
        return res; 
    }
    int xo(vector<int>& cur){
        int sum = 0;
        for (auto& c : cur){
            sum ^= c;
        }
        return sum;
    }
    void dfs(vector<int>& nums, int start, vector<int>& cur, int& res ){
        //res.push_back(cur);
        res += xo(cur);

        for (int i=start; i<nums.size(); i++){
            cur.push_back(nums[i]);
            dfs(nums, i+1, cur, res);
            cur.pop_back();
        }
    }
};
