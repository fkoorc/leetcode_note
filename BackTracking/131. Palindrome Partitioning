//TC: O(n * 2^n)
//SC: O(n * 2^n)
class Solution {
public:
    vector<vector<string>> partition(string s) {
        //backtracking
        vector<string>cur;
        vector<vector<string>>res;
        dfs(s, 0, cur, res);
        return res;
    }
    bool palin(string&s, int l, int r){
        while (l<r){
            if (s[l++] != s[r--])return false;//l++;  r--;
        }
        return true;
    }
    void dfs(string &s, int start, vector<string>&cur, vector<vector<string>>&res){
        if (start == s.size()){
            res.push_back(cur);
            return; //cause we already reach the end of the s string
        }
        for (int end = start; end<s.size(); end++){
            if (palin(s, start, end)){
                cur.push_back(s.substr(start, end-start+1));
                dfs(s, end+1, cur, res);
                cur.pop_back();
            }
        }
    }
    
};
