 //Time:O(n)
 //Space:O(nlogn) each item len = logn, max n/2 set of items, so res len = nlogn
 
//###Recursive#############################################################################
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>>res;
        vector<int>item;
        dfs(root, targetSum, item, res);
        return res;       
    }
private:
    void dfs(TreeNode* root, int targetSum, vector<int>& item, vector<vector<int>>& res ){
        if (!root)return;
        item.push_back(root->val);
        targetSum -= root->val;
        if (!root->left && !root->right && targetSum == 0){
            res.push_back(item);
        }

        dfs(root->left, targetSum, item, res);
        dfs(root->right, targetSum, item, res);
        item.pop_back();
    }
};

//###iterative#############################################################################
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>>res;//now res = []
        stack<pair<TreeNode*, vector<int>>>s;
        stack<int>cur;
        if (!root) return res;

        s.push({root, {root->val}});
        cur.push(targetSum - root->val);
        
        while(!s.empty()){
            auto current = s.top();
            s.pop();
            auto curSum = cur.top();
            cur.pop();

            TreeNode* node = current.first;
            vector<int>item = current.second;
            /*for (const auto& i:item){
                cout<<i<<" ";
            }
            cout<<"curSum"<<curSum<<endl;*/

            if(!node->left && !node->right && curSum == 0){
                res.push_back(item);
            }

            vector<int>leftitem = item;
            vector<int>rightitem = item;

            if(node->left){
                leftitem.push_back(node->left->val);
                s.push({node->left, leftitem});
                cur.push(curSum - node->left->val);
            }
            if(node->right){
                rightitem.push_back(node->right->val);
                s.push({node->right, rightitem});
                cur.push(curSum - node->right->val);
            }
        }
        return res;
    }
};

