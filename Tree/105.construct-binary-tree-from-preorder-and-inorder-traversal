//Preorder dictates nodes, inorder dictates subtrees (preorder values, inorder positions)
//Time: O(n)
//Space: O(n)
class Solution {
private:
    TreeNode* build(vector<int>&preorder, vector<int>&inorder, int &index, int i, int j){
        if (i>j)return NULL;
        TreeNode *root = new TreeNode(preorder[index]);
        int split = 0;
        for (int i=0; i<inorder.size(); i++){
            if(preorder[index]==inorder[i]){
                split = i;
                //cout<<i<<split;
                break;
            }
        }
        
        //i =0, split = 1
        index++;
        root->left = build(preorder, inorder, index, i, split-1);
        root->right = build(preorder, inorder, index, split+1, j);

        return root;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int index = 0;
        return build(preorder, inorder, index, 0, inorder.size()-1);
        
    }
};
