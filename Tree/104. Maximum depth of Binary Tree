//Time: O(n)
//Space: O(1)
#solution1 : recursive
class Solution {
public:
    int maxDepth(TreeNode* root) {

        if (root == NULL){
            return NULL;
        }
        return 1+( max(maxDepth(root->left), maxDepth(root->right)) );
    }
};

//Time: O(n), n is the numbers of the tree nodes
//Space: O(w), w is the max width of the tree
#solution2 : BFS
class Solution {
public:
    int maxDepth(TreeNode* root) {
        queue<TreeNode*> q;
        if (root != NULL){
            q.push(root);
        }
        int level = 0;
        while(!q.empty()){
            int n = q.size();
            // in C++ if the q.size() will change in each loop, then must define at each time for each loop, fucking annoying
            for (int i=0; i<n; i++){
                TreeNode *node = q.front();
                q.pop();//deque pop() will pop the first in node
                if (node->left != NULL){
                    q.push(node->left);
                }
                if (node->right != NULL){
                    q.push(node->right);
                }
            }
            level++;
        }
        return level;
    }
};
