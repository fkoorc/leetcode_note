//TC: O(n)
//SC: O(1)
class Solution {
public:
    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {
        //store all satisfy
        //check the sliding windows with "minutess"
        //return max windows + satisfy
        int n = customers.size();
        int good = 0;
        int max_window = 0;
        int cur_window = 0;
        int l = 0;
        for (int r=0; r<n; r++){
            if (!grumpy[r]){
                good += customers[r];
            }else if (grumpy[r]){
                cur_window += customers[r];
            }
            if (r-l+1 > minutes){
                if (grumpy[l]){
                    cur_window -= customers[l];
                }
                l++;
            }
            max_window = max(max_window, cur_window);
        }
        return good+max_window;
    }
};
