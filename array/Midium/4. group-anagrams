class Solution {
public:
    static string getKey(string str){//()const string& str)
        vector<int> count(26);
        for (int j = 0; j < str.size(); j++){
            count[str[j] - 'a']++;
        }
        //for(auto c:count) 
        //    cout<<"count:"<<c<<endl; // 26 buckets
        string key = "";
        for (int i = 0; i<count.size(); i++){
            key.append(to_string(count[i])+'#');
        }
        return key;//ex: 1#0#0#0#1#0#0#0#0#0#0#0#0#0#0#0#0#0#0#1#0#0#0#0#0#0#

    }
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>>mp;
        for (int i = 0; i<strs.size(); i++){
            string key = getKey(strs[i]);
            //cout << key << endl;
            mp[key].push_back(strs[i]);//if key are same, multiple strs[i] will putin mp[key]
        }
        vector<vector<string>> result;//output 
        for(auto it = mp.begin(); it != mp.end(); it++){
            cout<<(*it).first<<endl;//(*it).second, first = key, second = value
            //cout<<(*it).second<<endl;
            for (const auto &it_sec:(*it).second){
                cout<< it_sec<<" ";
            }
            cout<<endl;
            result.push_back(it->second);
        }
        return result;
    }

    
};
