//two point O(n)
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int l=0, r=numbers.size()-1;
        while(l<r){
            if (numbers[l]+numbers[r] > target)
                r = r-1;
            else if(numbers[l]+numbers[r] < target)
                l = l+1;
            else 
                break;    
        }
        return {l+1, r+1};
    }
};



//Binary search O(logn)
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        //binary search O(logn)
        const int n = numbers.size();
        for (int i = 0; i<n; i++){ //must use{}
            int temp = target - numbers[i];
            int l = i+1;//i+1 no need to serch itself
            int r = n;//n-1+1
            while(l<r){
                int m = l+(r-l)/2;
                if (numbers[m] < temp)
                    l = m+1;
                else if (numbers[m]>temp)
                    r = m;// pass when use r = m? why
                else
                    return {i+1, m+1};// ans require 1->(n+1)
            } 
        }
        return {};//vector type need return {}
    }
};
