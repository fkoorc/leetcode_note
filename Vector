支援隨機存取
集合尾端增刪元素很快 : O(1)
集合中間增刪元素比較費時 : O(n)，所以允許的話，可以先swap要刪除的值到最後，然後再刪除。
#include <vector>
//declare a vector
vector<T> v;
vector<T> v(n);      // 定義n的長度
vector<T> sub(v.begin(), v.begin() + 5); // subvector
vector<T> v(s.begin(), s.end()); // import data from set
vector<vecotr<T>> v_2d; // 2維vector
vector<vector<T>> v_2d1(n, vector<T>(m)); // 
// 常用function
v.empty();
v.size();
v.front();
v.back();
v.push_back();    // 將obj推到vector的最後端。
v.emplace_back(); // 將obj推到vector的最後端。
                  // 如果用這個construct obj則可以減少copy或是move  
v.pop_back();    // 如果要同時操作front, back則用deque
v.insert();      // 插入到指定位置
v.insert(v.begin(), target) // 加入target到最前面
v.insert(v.begin() + n, target) // 加入taret到任意位置, n <= v.size()
v.erase();       // 移除某個指定位置element 
// 另一種比較有效率的刪除方法, 
// 但是順序會變，只能用在不在乎順序的情況
swap(v[n], v.back()); // 交換n和最後一個位置
v.pop_back();         // back()會在原本n的位置

v.clear();       // 清除全部element
v.count(v.begin(), v.end(), val); // 計算範圍內val出現的次數
auto it = find(v.begin(), v.end(), val); // 尋找第一個val出現的位置。
v.reverse(first, last);     // 反轉vector從first到last
// insert vector v2 to the end of vector v1
v1.insert(v1.end(), v2.begin(), v2.end());
// 調整vector大小
v.resize(n, vector<int>(m, -1)); // v成為nxm大小，預設值都為-1
// Traversal
for(int i = 0; i < v.size(); ++i) {
    cout << v[i] << endl;
}
for(const auto& i : v) {
    cout << i << endl;
}
for(auto it = v.begin(); it != v.end(); ++it) {
    cout << *it << endl;
}
// accumulate
accumulate(v.begin(), v.end(), bias); // 同常bias = 0
accumulate(v.begin(), v.end(), 0l); // 避免overflow，可以使用long來相加。
// 使用lambda，當val為偶數才相加
accumulate(begin(v), end(v), bias, [](int& sum, int val){
   return sum + (val % 2 == 0 ? val : 0);
});
// fill the increase value
// 從begin()開始到end()，填充val，且下一個是val++，以此類推。
// v[0] = val, v[1] = val + 1, v[2] = val + 2,...
// 必須include <numeric>
iota(v.begin(), v.end(), val); 
