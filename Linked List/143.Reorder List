//Time: 0.5n+n+n = O(n)
//Space: O(1)
class Solution {
public:
    void reorderList(ListNode* head) {
        if (head->next == NULL) return;

        //find middle node
        ListNode *slow = head;
        ListNode *fast = head;
        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        //second = slow.next
        ListNode *n1 = head;
        ListNode *n2 = reverse(slow);

        merge(n1, n2);
        //return head;
        
    }
private :
    ListNode *reverse(ListNode *head){
        ListNode *prev = NULL;
        ListNode *curr = head;

        while(curr){
            ListNode *temp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }

    void merge(ListNode *l1, ListNode *l2){
        
        while (l1 != NULL && l2 != NULL){
            ListNode *l1_next = l1->next;
            ListNode *l2_next = l2->next;

            l1->next = l2;
            if (l1_next == NULL) break;

            l2->next = l1_next;

            //move to next round
            l1 = l1_next;
            l2 = l2_next;
        }
        //sure last node .next point to NULL for merge terminated
        if (l1!=NULL) l1->next = NULL;
    }
};
