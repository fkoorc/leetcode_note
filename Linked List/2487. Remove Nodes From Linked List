 //Time: O(n)
 //Space: O(1)
### two traversal/reverse linklist ###
class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode *prev = NULL, *cur = head;
        ListNode* tmp = NULL;
        while (cur){
            tmp = cur->next;
            cur->next = prev;
            prev = cur;
            cur = tmp;
        }return prev;
    }

    ListNode* removeNodes(ListNode* head) {
        //reverse
        head = reverse(head);
        int last_max = head->val;

        ListNode* cur = new ListNode(0); 
        ListNode* prev = cur;

        //iterate reversed link list and save passed max value node
        while(head){
            while(head && head->val < last_max){head = head->next;}
            if (head == NULL){cur->next = NULL; break;}
            last_max = head->val; //here the last_max must larger than old one
            cur->next = head; //now head is valid so add in cur link-list
            cur = cur->next;
            head = head->next;
        }


        //reverse back        
        return reverse(prev->next);//prev->next similar with dummy->next
        
    }
    
};
