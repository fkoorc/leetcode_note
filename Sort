#include <algorithm>
// 對vector<T> v進行排序，預設是從小到大
sort(v.begin(), v.end());
sort(v.begin(), v.end(), greater<T>()); //從大到小排序
sort(v.rbegin(), v.rend()); // 也是從大排到小，
                            // 因為給了存放位置是從後面開始
                            // 所以把最小值依序排在最後面
// call by value
sort(v.begin(), v.end(), [](int a, int b){
    return a < b; // 從小到大排序
});
// call by reference
sort(v.begin(), v.end(), [](int& a, int& b) {
    return a < b;     
});
// sort vector<vector<int>>
vector<vector<int>> nums;
sort(nums.begin(), nums.end()); // nums[0] 小的在前面，nums[0]一樣則是nums[1]小的在前面。

// 如果針對多維資料做排序
vetor<vector<int>> nums = {{1, 5}, {3, 2}, {2, 2}, {1, 2},{4, 1}};
sort(nums.begin(), nums.end(), [](vector<int>& a, vector<int>& b){
    return a[1] < b[1]; // 只針對第二個element排序    
});
// 結果為
// {{4, 1}, {3, 2}, {2, 2}, {1, 2}, {1, 5}}
// 其中第二個element一樣的話，會照在nums出現的順序。

###C++ STL###
<Algorithm>

vector<int> v;
// ...
std::sort(v.begin(), v.end());
升序：std::sort(begin, end, less<Type>()); ex: sort(arr, arr+10);
降序：std::sort(begin, end, greater<Type>()); ex: sort(arr, arr+10, std::greater<int>());


###array###

#include<iostream>
#include<algorithm>
using namespace std;

int main(){
	int arr[] = {4, 5, 8, 3, 2};
	sort(arr, arr+10);
	for (int i = 0; i<10; i++){
		cout<< arr[i]<<"";
	}
	return 0;
}


###vector###
正向排序 std::sort(v.begin(), v.end());
反向排序 std::sort(v.rbegin(), v.rend());


std::vector<int> v = {5, 4, 1, 7, 3, 8, 9, 10, 6, 2};
    std::sort(v.begin(), v.begin()+10);
    // or
    //std::sort(v.begin(), v.end());


###string###
在第三參數帶入 std::less<char>() 來達成升冪(升序/由小到大)的排序(按ASCII碼字母順序)，
std::string s = "eacdb";
std::sort(s.begin(), s.end(), std::less<char>());
反向:
std::sort(s.begin(), s.end(), std::greater<char>());

###補充###
如果你只想排序前5筆數值，其他數值不排序，可以這樣寫，
int arr[] = {4, 5, 8, 3, 7, 1, 2, 6, 10, 9};
std::sort(arr, arr+5);

std::vector<int> arr = {4, 5, 8, 3, 7, 1, 2, 6, 10, 9};
std::sort(arr.begin(), arr.begin()+5);

排序第3筆到第5筆數值
int arr[] = {4, 5, 8, 3, 7, 1, 2, 6, 10, 9};
std::sort(arr+2, arr+5);

std::vector<int> arr = {4, 5, 8, 3, 7, 1, 2, 6, 10, 9};
std::sort(arr.begin()+2, arr.begin()+5);


###自動計算陣列總長度###
int arr[] = {4, 5, 8, 3, 7, 1, 2, 6, 10, 9};
int len = sizeof(arr) / sizeof(int);
std::sort(arr, arr + len);
